#include "Coder.h"
#include"Node.h"
#include"Code.h"
#include"HuffmanTree.h"
#include<fstream>
#include<sstream>
using namespace std;

std::string Coder::readUncodedFile(std::string fileDic)
{
    string out;
    ifstream file;
    file.open(fileDic, ios::in);
    if (!file.is_open())
    {
        cout << "" << endl;
        return out;
    }

    string temp;
    getline(file, temp);
    out += temp;
    while (getline(file, temp))
    {
        out = out + '\n' + temp;
    }
    file.close();
    return out;
}

void Coder::encodeFile(std::string file)
{
}

std::pair<HuffmanTree**, int> Coder::createNodes(std::string text)
{
    Node** nodes;
    int nodesVolume = 0;
    int nodesCount = 0;
    
    auto expandNodes = [&]() {
        nodesVolume += 10;
        Node** oldnodes = nodes;
        nodes = new Node * [nodesVolume];
        for (int i = 0; i < nodesCount; i++)
        {
            nodes[i] = oldnodes[i];
        }
        //delete oldnodes;
    };

    expandNodes();
    bool exist;
    for (int i = 0; i < text.length(); i++)
    {
        string ch;
        ch = text[i];
        exist = false;
        for (int j = 0; j < nodesCount; j++)
        {
            if (nodes[j]->value == ch)
            {
                nodes[j]->priority++;
                exist = true;
                break;
            }
        }
        if (!exist)
        {
            if (nodesCount + 1 >= nodesVolume) expandNodes();
            nodes[nodesCount] = new Node(1, ch);
            nodesCount++;
        }
    }

    HuffmanTree** forest = new HuffmanTree * [nodesCount];
    for (int i = 0; i < nodesCount; i++)
    {
        forest[i] = new HuffmanTree(nodes[i]);
    }

    return pair<HuffmanTree**, int>(forest, nodesCount);
}
